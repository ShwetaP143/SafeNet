1) What are new features which got introduced in Java 8?
->	Lambda Expressions − a new language feature allowing treating actions as objects
	Method References − enable defining Lambda Expressions by referring to methods directly using their names
	Optional − special wrapper class used for expressing optionality
	Functional Interface – an interface with maximum one abstract method, implementation can be provided using a Lambda Expression
	Default methods − give us the ability to add full implementations in interfaces besides abstract methods
	Nashorn, JavaScript Engine − Java-based engine for executing and evaluating JavaScript code
	Stream API − a special iterator class that allows processing collections of objects in a functional manner
	Date API − an improved, immutable JodaTime-inspired Date API
	Time API
2) What are main advantages of using Java 8?
->	More compact code
	Less boiler plate code
	More readable and reusable code
	More testable code
	Parallel operations
3) What is lambda expression?
->	Lambda expression is anonymous function which has set of parameters and a lambda (->) and a function body .You can call it function without name.
	
	A method that is defined as Lambda Expression can be passed as a parameter to another method.
	A method can exist standalone without belonging to a class.
	There is no need to declare the parameter type because the compiler can fetch the type from the parameter’s value.
	We can use parentheses when using multiple parameters but there is no need to have parenthesis when we use a single parameter.
	If the body of expression has a single statement then there is no need to include curly braces.
4) Can you explain the syntax of Lambda expression?
->	So we can divide structure of Lambda expression to three parts:
	1. Argument list or parameters
		Lambda expression can have zero or more arguments.
		You can choose to not declare type of arguments as it can be inferred from context.
		you can not declare one argument’s type and do not declare type for other argument.
		When there is a single parameter, if its type is inferred, it is not mandatory to use parentheses
	2. Array token (->)
	3. Body
		Body can have expression or statements.
		If there is only one statement in body,curly brace is not needed and return type of the anonymous function is same as of  body expression
		If there are more than one statements, then it should be in curly braces and return type of anonymous function is same as value return from code block, void if nothing is returned.
5) What are functional interfaces/SAM?
->	Functional interfaces are those interfaces which can have only one abstract method.It can have static method, default 		methods or can override Object’s class methods.
	SAM stands for “Single Abstract Method”.
	There are many functional interfaces already present in java such as Comparable, Runnable.
	Example:-
		Function – it takes one argument and returns a result
		Consumer – it takes one argument and returns no result (represents a side effect)
		Supplier – it takes not argument and returns a result
		Predicate – it takes one argument and returns a boolean
		BiFunction – it takes two arguments and returns a result
		BinaryOperator – it is similar to a BiFunction, taking two arguments and returning a result. The two arguments and the result are all of the same types
		UnaryOperator – it is similar to a Function, taking a single argument and returning a result of the same type
6) How lambda expression and functional interfaces are related?
->	Lambda expressions can only be applied to abstract method of functional interface.
7) Can you create your own functional interface?
->	Yes, you can create your own functional interface. Java can implicitly identify functional interface but you can also annotate it with @FunctionalInterface.
8) What is method reference in java 8?
->	Method reference is used refer method of functional interface. It is nothing but compact way of lambda expression.You can simply replace lambda expression with method reference.
	Syntax:
		class::methodname
	Example:-
		(o) -> o.toString();
	can become:
		Object::toString();

9) What is Optional? Why and how can you use it?
->	Java 8 has introduced new class Called Optional. This class is basically introduced to avoid NullPointerException in java.
Optional class encapsulates optional value which is either present or not.
	It is a wrapper around object and can be use to avoid NullPointerExceptions.
10) What Is the Meaning of String::Valueof Expression?
->	It is a static method reference to the valueOf method of the String class.
10) What are default methods?
->	Default methods are the methods of the Interface which has a body. These methods, as the name suggests, use the default keywords. The use of these default methods is “Backward Compatibility” which means if JDK modifies any Interface (without default method) then the classes which implement this Interface will break.

	On the other hand, if you add the default method in an Interface then you will be able to provide the default implementation. This won’t affect the implementing classes.

	Syntax:

		public interface questions{
			default void print() {
				System.out.println("www.softwaretestinghelp.com");
            }
		}
		
11) What is the difference between the Collection API and Stream API?
->	Stream API
		It was introduced in Java 8 Standard Edition version.
		There is no use of the Iterator and Spliterators.
		An infinite number of features can be stored.
		Consumption and Iteration of elements from the Stream object can be done only once.
		It is used to compute data.
	Collection API
		It was introduced in Java version 1.2
		With the help of forEach, we can use the Iterator and Spliterators to iterate the elements and perform an action on each item or the element.
		A countable number of elements can be stored.
		Consumption and Iteration of elements from the Collection object can be done multiple times.
		It is used to store data.
11) What is the difference between Predicate and Function?
->	Both are functional interfaces.
		Predicate<T> is single argument function and either it returns true or false.This can be used as the assignment target for a lambda expression or method reference.

		Function<T,R> is also single argument function but it returns an Object.Here T denotes type of input to the function and R denotes type of Result.

 		This can also be used as the assignment target for a lambda expression or method reference.
12) Are you aware of Date and Time API introduced in Java 8? What the issues with Old Date and time API?
->	Issues with old Date and TIme API:

		Thread Safety: You might be already aware that java.util.Date is mutable and not thread safe. Even java.text.SimpleDateFormat is also not Thread-Safe. New Java 8 date and time APIs are thread safe.

		Performance: Java 8 ‘s new APIs are better in performance than old Java APIs.

		More Readable: Old APIs such Calendar and Date are poorly designed and hard to understand. Java 8 Date and Time APIs are easy to understand and comply with ISO standards.
13) Can you provide some APIs of Java 8 Date and TIme?
->	LocalDate, LocalTime, and LocalDateTime are the Core API classes for Java 8. As the name suggests, these classes are local to context of observer. It denotes current date and time in context of Observer.
14) How will you get current date and time using Java 8 Date and TIme API?
->	You can simply use now method of LocalDate to get today’s date.
15) Do we have PermGen in Java 8? Are you aware of MetaSpace?
->	Until Java 7, JVM used an area called PermGen to store classes. It got removed in Java 8 and replaced by MetaSpace.
	Major advantage of MetaSpace over permgen:
	PermGen was fixed in term of maximum size and can not grow dynamically but Metaspace can grow dynamically and do not have any size constraint.

15) What is the difference between limit and skip?
->	The limit() method is used to return the Stream of the specified size. 
	For Example, If you have mentioned limit(5), then the number of output elements would be 5.
->	Whereas, the skip() method is used to skip the element.
15) What is the difference between Iterator and Spliterator?
->	Iterator:-
		-> It was introduced in Java version 1.2
		-> It is used for Collection API.
		-> Some of the iterate methods are next() and hasNext() which are used to iterate elements.
		-> We need to call the iterator() method on Collection Object.
		-> Iterates only in sequential order.
	Spliterator:-
		-> It was introduced in Java SE 8
		-> It is used for Stream API.
		-> Spliterator method is tryAdvance().
		-> We need to call the spliterator() method on Stream Object.
		-> Iterates in Parallel and sequential order.
16) Given a list of employees, you need to filter all the employee whose age is greater than 20 and print the employee names.(Java 8 APIs only)
-> List<String> names = emps.stream().filter(emp -> emp.getAge()>20).map(Employee::getName).collect(Collectors.toList());
   names.forEach(System.out::println);
		OR
		
	emps.stream().filter(emp -> emp.getAge() > 20).map(Employee::getName).collect(Collectors.toList()).forEach(System.out::println);


17) Given the list of employees, count number of employees with age 25?
->   Long count = emps.stream().filter(emp->emp.getAge() >= 29).count();
     System.out.println(count);

18) Given the list of employees, find the employee with name “Mary”.
-> 	Optional<Employee> employee = emps.stream().filter(emp->emp.getName().equals("Om")).findAny();
    employee.ifPresent(System.out::println);

19)Given a list of employee, find maximum age of employee?
-> 	Integer max = emps.stream().map(Employee::getAge).max(Integer::compare).get();
    System.out.println(max);
			OR
			
	Optional<Employee> max = emps.stream().max(Comparator.comparing(Employee::getAge));
    max.ifPresent(m->System.out.println(m.getAge()));		


20) Given a list of employees, sort all the employee on the basis of age? Use java 8 APIs only
->  emps.stream().sorted(Comparator.comparing(Employee::getAge)).forEach(System.out::println);
	For reverse ->         emps.stream().sorted(Comparator.comparing(Employee::getAge).reversed()).forEach(System.out::println);

21) Join the all employee names with “,” using java 8?
->  String s = emps.stream().map(Employee::getName).collect(Collectors.joining(","));
    System.out.println(s);

22) Given the list of employee, group them by employee name?
->   Map<String, List<Employee>> groupByName = emps.stream().collect(Collectors.groupingBy(Employee::getName));
     System.out.println(groupByName);

-> Count occurances by groupingBy
	Map<String, Long> counted = list.stream()
            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

23) Difference between Intermediate and terminal operations in Stream?
->	Java 8 Stream supports both intermediate and terminal operation.

->	Intermediate operations are lazy in nature and do not get executed immediately. Terminal operations are not lazy, they are executed as soon as encountered. Intermediate operation is memorized and is called when terminal operation is called.

->	All Intermediate operations return stream as it just transforms stream into another and terminal operation don’t.
24) Given the list of numbers, remove the duplicate elements from the list.
->	You can simply use stream and then collect it to set using Collections.toSet() method.
	Example:-
		Integer[] arr=new Integer[]{1,2,3,4,3,2,4,2};
        List<Integer> listWithDuplicates = Arrays.asList(arr);
 
        Set<Integer> setWithoutDups = listWithDuplicates.stream().collect(Collectors.toSet());
        setWithoutDups.forEach((i)->System.out.print(" "+i));

25) Difference between Stream’s findFirst() and findAny()?
->	findFirst will always return the first element from the stream whereas findAny is allowed to choose any element from the stream.
	findFirst has deterministic behavior whereas findAny is nondeterministic behavior.

26) Given a list of numbers, square them and filter the numbers which are greater than 1000 and then find average of them.( Java 8 APIs only)
->
        Function<Integer, Integer> square = x -> x * x;
        OptionalDouble avg = primes.stream().map(square).filter(num-> num > 100).mapToInt(x->x).average();
        System.out.println(avg.getAsDouble());

27) What is use of Optional in Java 8?
->	Java 8 optional can be used to avoid NullPointerException.You can read about the detailed tutorial.
28) What is predicate function interface?
->	Predicate is single argument function which returns true or false. It has test method which returns boolean.
	When we are using filter in above example, we are actually passing Predicate functional interface to it.
29) What is consumer function interface?
->	Consumer is single argument functional interface which does not return any value.
	When we are using foreach in above example, we are actually passing Consumer functional interface to it.
	Example:-
		Consumer<String> str = str1 -> System.out.println(str1);
        str.accept("Saket");
30) What is supplier function interface?
->	Supplier is function interface which does not take any parameter but returns the value using get method.
	Example:-
		Supplier<String> str = () -> "Saket";
        System.out.println(str.get());
31) What is Nashorn in Java 8?
->	Nashorn in Java 8 is a Java-based engine for executing and evaluating JavaScript code.

32) What is the Difference Between Map and flatMap Stream Operation?
->	Map Stream operation gives one output value per input value whereas flatMap Stream operation gives zero or more output value per input value.

33) What is the difference between Java 8 Internal and External Iteration?

->	Internal Iteration:-
		-> It was introduced in Java 8 (JDK-8).	
		-> It iterates internally on the aggregated objects such as Collection.
		-> It supports the Functional programming style.
		-> Internal Iterator is passive.
		-> It is less erroneous and requires less coding.
	External Iteration:-
		-> It was introduced and practiced in the previous version of Java (JDK-7, JDK-6 and so on).
		-> It iterates externally on the aggregated objects.
		-> It supports the OOPS programming style.
		-> External Iterator is active.
		-> It requires little more coding and it is more error-prone.
		
34) What is JJS?
->	JJS is a command-line tool used to execute JavaScript code at the console. In Java 8, JJS is the new executable which is a JavaScript engine.

35) What is ChronoUnits in Java 8?
->	ChronoUnits is the enum that is introduced to replace the Integer values that are used in the old API for representing the month, day, etc.

36) Explain StringJoiner Class in Java 8? How can we achieve joining multiple Strings using StringJoiner Class?
->	In Java 8, a new class was introduced in the package java.util which was known as StringJoiner. Through this class, we can join multiple strings separated by delimiters along with providing prefix and suffix to them.


37) Code for flatmap
	->         
		List<String> productList1 = Arrays.asList("Printer", "Mouse", "Keyboard", "Motherboard");
        List<String>  productList2 = Arrays.asList("Scanner", "Projector", "Light Pen");
        List<String> productList3 = Arrays.asList("Pen Drive", "Charger", "WIFI Adapter", "Cooling Fan");
        List<List<String>> allProducts = Arrays.asList(productList1, productList2, productList3);

        List<String> ap = allProducts.stream().flatMap(prduct -> prduct.stream()).collect(Collectors.toList());
        System.out.println(ap);
		
38) Parallel vs sequential stream in java
	->  // Parallel Vs Sequential Stream

        List<String> psData= Arrays.asList("Hello ","V", "I", "N", "O", "D");

        // using parallelStream() method for parallel stream
        psData.forEach(System.out::print);
        System.out.println("\n");
        psData.parallelStream().forEach(System.out::print);
        System.out.println("\n");
        psData.parallelStream().forEachOrdered(System.out::print);
        System.out.println("\n");